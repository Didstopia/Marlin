# Based on the following workflow by ColinM9991:
# https://github.com/ColinM9991/Marlin/blob/skr-mini-e3/.github/workflows/compile-configs-custom.yml

name: Build BTT SKR Mini E3 V3.0 (Ender 3 V2)

on:
  # Trigger custom firmwares builds only in specific situations
  push:
    ## TODO: How do we ensure that we always build the "bugfix-2.0.x" branch on updated to the "skr-mini-e3-v3-0" branch?
    # When the following branches are pushed
    branches:
      - 2.0.x
      - bugfix-2.0.x
      - skr-mini-e3-v3-0
    
    ## TODO: How do we ensure that we always build the "2.0.x" branch on new tags?
    # When the following tags are pushed
    tags:
      - 2*

  # Allow manual builds with a configurable target branch
  workflow_dispatch:
    inputs:
      targetBranch:
        description: "Target Branch"
        required: true
        default: "bugfix-2.0.x"

jobs:

  build-firmwares:
    name: Build Firmwares
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board: [STM32G0B1RE_btt]
        #grid: [3, 5, 10, 15]
        #grid: [5, 10]
        grid: [10]
        #high-speed: [true, false]
        #high-speed: [false]
        high-speed: [true]
        #direct-drive: [true, false]
        direct-drive: [true]
        #ubl: [true, false]
        ubl: [true]
        # touch-screen: [true, false]
        ## FIXME: Enabling touch screen support requires a bit more work and effort,
        ##        so disabling for now until we have the time to properly implement it.
        touch-screen: [false]
        linear-advance: [true, false]
        junction-deviation: [true, false]
    steps:

      - name: Checkout Repository
        if: env.ACT == 'true'
        uses: actions/checkout@v2

      - name: Prepare Test Environment
        if: env.ACT == 'true'
        run: |-

          # Copy the current scripts to a temporary folder
          if [ ${{ env.ACT }} == 'true' ]; then
            cp -fr .github/workflows/scripts /tmp
            ls -lah /tmp
          fi

          # Fix tool cache paths when running locally
          if [ ${{ env.ACT }} == 'true' ]; then
            echo "RUN_TOOL_CACHE=/toolcache" >> $GITHUB_ENV
            echo "RUNNER_TOOL_CACHE=/toolcache" >> $GITHUB_ENV
            echo "AGENT_TOOLSDIRECTORY=/toolcache" >> $GITHUB_ENV
          fi

          # Fix python package caching when running locally
          if [ ${{ env.ACT }} == 'true' ]; then
            echo "PIP_USER=true" >> $GITHUB_ENV
            mkdir -p /toolcache/pythonuserbase/bin
            echo "PYTHONUSERBASE=/toolcache/pythonuserbase" >> $GITHUB_ENV
            echo "PATH=/toolcache/pythonuserbase/bin:${PATH}" >> $GITHUB_ENV
          fi

      - name: Prepare Target Branch
        run: |-

          # Enable script debugging
          # set -x

          # Target branch defaults to base ref
          TARGET_BRANCH=${{ env.GITHUB_BASE_REF }}
          echo "Target branch: $TARGET_BRANCH"
          
          # If our target branch is not set, default to the "bugfix-2.0.x" branch instead
          if [ -z "${TARGET_BRANCH}" ]; then
            echo "Target branch not available, defaulting to 'bugfix-2.0.x'"
            TARGET_BRANCH=bugfix-2.0.x
          fi

          # Allow overriding the target branch with manual builds
          OVERRIDE_TARGET_BRANCH=${{ github.event.inputs.targetBranch }}
          if [ ! -z "${OVERRIDE_TARGET_BRANCH}" ]; then
            echo "Branch override detected, setting branch to: '${OVERRIDE_TARGET_BRANCH}'"
            TARGET_BRANCH=${OVERRIDE_TARGET_BRANCH}
          fi

          # If this is a tagged release, always use the "2.0.x" branch instead
          ## TODO: Implement
          REF_TYPE=${{ env.GITHUB_REF_TYPE }}
          REF_NAME=${{ env.GITHUB_REF_NAME }}
          if [ "$REF_TYPE" = "tag" ]; then
            echo "Release tag detected, setting branch to '2.0.x'"
            echo "TARGET_TAG=${REF_NAME}" >> $GITHUB_ENV
            TARGET_BRANCH=2.0.x
          fi

          echo "Final target branch: $TARGET_BRANCH"

          # Ensure that we have a target branch
          if [ -z "${TARGET_BRANCH}" ]; then
            echo "::error title=Missing target branch::Could not detect target branch, unable to continue"
            exit 1
          else
            # Export the final target branch as a global environment variable
            echo "TARGET_BRANCH=${TARGET_BRANCH}" >> $GITHUB_ENV
          fi

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ env.TARGET_BRANCH }}
          persist-credentials: false

      - name: Prepare Environment
        run: |-

          # Enable script debugging
          # set -x

          # Copy the scripts back into place when testing locally
          if [ ${{ env.ACT }} == 'true' ]; then
            cp -fr /tmp/scripts .github/workflows
            ls -lah .github/workflows .github/workflows/scripts
          fi

          # Generate the version based on the branch and commit/tag
          if [ -z "${TARGET_TAG}" ]; then
            echo "RELEASE_VERSION=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}" >> $GITHUB_ENV
          else
            echo "RELEASE_VERSION=$(git rev-parse --abbrev-ref HEAD)-${{ env.TARGET_TAG }}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}" >> $GITHUB_ENV
          fi
          # Print out the version
          echo "::notice title=Version::${{ env.RELEASE_VERSION }}"

      - name: Cache pip
        if: env.ACT != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        if: env.ACT != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

      - name: Setup Python
        uses: actions/setup-python@v2
        # with:
        #   cache: ${{ !env.ACT && 'pip' || '' }}

      - name: Install PlatformIO
        run: |-

          # Enable script debugging
          # set -x

          python -m pip install --upgrade pip
          pip install --upgrade platformio
          platformio platform update

      - name: Prepare Build Script
        if: env.ACT != 'true'
        id: configure_build_script
        run: |-

          # Enable script debugging
          # set -x

          # Download the latest helper build script
          mkdir -p .github/workflows/scripts
          wget \
            https://raw.githubusercontent.com/Didstopia/Marlin/skr-mini-e3-v3-0/.github/workflows/scripts/configure_build_script.sh \
            -O .github/workflows/scripts/configure_build_script.sh

      - name: Configure Firmware
        id: configure_firmware
        run: |-

          # Enable script debugging
          # set -x

          # Ensure we're always in the project root
          cd ${GITHUB_WORKSPACE}

          # Source the helper build script
          source ${GITHUB_WORKSPACE}/.github/workflows/scripts/configure_build_script.sh



          ## BEGIN CONFIGURATION.H

          # TODO: Leaving this alone for now (default is 180)
          # Set minimum extruder temperature when extruding
          #configValue EXTRUDE_MINTEMP 170 Marlin/Configuration.h

          # TODO: Leaving this alone for now (default is 1000)
          # TODO: Wouldn't something like 200 make more sense?
          # Set maximum length to extrude within a single extrusion
          #configValue EXTRUDE_MAXLENGTH 600 Marlin/Configuration.h

          # Set default/custom steps per unit, per axis
          configValue DEFAULT_AXIS_STEPS_PER_UNIT "{ 80, 80, 400, 95.1 }" Marlin/Configuration.h

          # TODO: Leaving this alone for now (defaults are higher)
          # Set default/custom maximum feedrate (movement speed)
          #configValue DEFAULT_MAX_FEEDRATE "{ 200, 200, 5, 25}" Marlin/Configuration.h

          # TODO: Leaving this alone for now (defaults are lower)
          # FIXME: Maybe the max acceleration for the extruder is causing the varying sample sizes?
          # Set default/custom maximum acceleration
          #configValue DEFAULT_MAX_ACCELERATION "{ 1000, 1000, 100, 10000 }" Marlin/Configuration.h

          # TODO: Leaving this alone for now (default is 1000)
          # Set default/custom maximum acceleration while moving/traveling
          #configValue DEFAULT_TRAVEL_ACCELERATION 500 Marlin/Configuration.h

          # Enable S-Curve Acceleration (default is disabled)
          configEnable S_CURVE_ACCELERATION Marlin/Configuration.h

          # Disable Z axis endstop switch support (we use BLTouch/CRTouch instead, default is enabled)
          configDisable Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN Marlin/Configuration.h

          # Enable Z homing using a probe (default is disabled)
          configEnable USE_PROBE_FOR_Z_HOMING Marlin/Configuration.h

          # Enable BLTouch/CRTouch support
          configEnable BLTOUCH Marlin/Configuration.h

          # Set default/custom nozzle offsets
          configValue NOZZLE_TO_PROBE_OFFSET "{ -45.8, -5.4, 0 }" Marlin/Configuration.h

          # Increase the probing margin (for BLTouch/UBL/ABL, default is 10)
          configValue PROBING_MARGIN 20 Marlin/Configuration.h

          # Increase X/Y axis feed rate (travel speed) when probing (for BLTouch/UBL, default is 50x60, Jyers config uses 133x60)
          #configValue XY_PROBE_FEEDRATE "(133*60)" Marlin/Configuration.h
          # TODO: Lowered from 133mm/s to 100mm/s, however some say the BLTouch is more reliable at 60mm/s!
          #configValue XY_PROBE_FEEDRATE "(100*60)" Marlin/Configuration.h
          configValue XY_PROBE_FEEDRATE "(60*60)" Marlin/Configuration.h

          # FIXME: Ensure the defaults are set to -10 and 10!
          # TODO: Leaving these alone for now
          # Set min/max probe offsets (defaults are -10 and 10, same for Jyers)
          #configValue Z_PROBE_OFFSET_RANGE_MIN -20 Marlin/Configuration.h
          #configValue Z_PROBE_OFFSET_RANGE_MAX 20 Marlin/Configuration.h

          # Enable multiple probings (for BLTouch/UBL)
          configValue MULTIPLE_PROBING 2 Marlin/Configuration.h

          # Enable extra probing
          configValue EXTRA_PROBING 1 Marlin/Configuration.h

          # Enable Z probe testing (for BLTouch/UBL)
          configEnable Z_MIN_PROBE_REPEATABILITY_TEST Marlin/Configuration.h

          # Require homing after steppers have deactivated/unlocked (and before trying to move)
          configEnable NO_MOTION_BEFORE_HOMING Marlin/Configuration.h
          configEnable HOME_AFTER_DEACTIVATE Marlin/Configuration.h

          # Increase bed size for probing (for BLTouch/UBL/ABL, default is 220x220, Jyers uses 230x230)
          #configValue X_BED_SIZE 235 Marlin/Configuration.h
          #configValue Y_BED_SIZE 235 Marlin/Configuration.h
          configValue X_BED_SIZE 230 Marlin/Configuration.h
          configValue Y_BED_SIZE 230 Marlin/Configuration.h

          # Extend maximum X position for better probe reachability (for BLTouch/UBL/ABL, default is X_BED_SIZE, Jyers uses X_BED_SIZE + 15)
          configValue X_MAX_POS "X_BED_SIZE + 15" Marlin/Configuration.h

          # TODO: This will need adjusting if we end up utilizing mechanical gantry calibration
          # Lower maximum Z position for better mechanical gantry calibration
          #configValue Z_MAX_POS 250 Marlin/Configuration.h

          # Enable filament runout sensor
          configEnable FILAMENT_RUNOUT_SENSOR Marlin/Configuration.h
          
          # TODO: Should we keep it disabled by default?
          configValue FIL_RUNOUT_ENABLED_DEFAULT false Marlin/Configuration.h

          # TODO: This needs to be configured correctly
          # Set the default/custom runout sensor filament distance
          configValue FILAMENT_RUNOUT_DISTANCE_MM 0 Marlin/Configuration.h

          # Enable leveling after completion (for BLTouch/UBL/ABL)
          ## NOTE: Only enable one of these, not both!
          configEnable RESTORE_LEVELING_AFTER_G28 Marlin/Configuration.h

          # TODO: Leaving this disabled, since it's the default anyway
          # Set default fade height, which helps with warped beds and more uniform results (for BLTouch/UBL/ABL, default is 10 for Creality and Jyers)
          #configValue DEFAULT_LEVELING_FADE_HEIGHT "10.0" Marlin/Configuration.h

          # TODO: Leaving this disabled for now
          # Enable leveling debugging
          #configEnable DEBUG_LEVELING_FEATURE Marlin/Configuration.h

          # Set the leveling grid size for the current firmware configuration
          configValue GRID_MAX_POINTS_X $GRID Marlin/Configuration.h

          # Enable safe homing on the Z axis (disabled by default, enabled in Jyers)
          configEnable Z_SAFE_HOMING Marlin/Configuration.h

          # TODO: Leaving this alone for now (defaults are higher)
          # Reduce homing feed rates (homing speeds)
          #configValue HOMING_FEEDRATE_MM_M "{ \(20\*60\), \(20\*60\), \(4\*60\) }" Marlin/Configuration.h

          # Enable EEPROM feedback (disabled by default, enabled in Jyers)
          configEnable EEPROM_CHITCHAT Marlin/Configuration.h

          # Clear EEPROM on startup after flashing a new firmware (disabled by default, Jyers still uses the old EEPROM_AUTO_INIT)
          configEnable EEPROM_INIT_NOW Marlin/Configuration.h

          # Enable nozzle parking when idle
          configEnable NOZZLE_PARK_FEATURE Marlin/Configuration.h

          # Increase Z axis while nozzle parking (disabled by default, enabled in Jyers)
          configValue NOZZLE_PARK_Z_RAISE_MIN 5 Marlin/Configuration.h

          # Enable print counting statistics (disabled by default, enabled in Jyers)
          configEnable PRINTCOUNTER Marlin/Configuration.h

          # FIXME: Not sure if important, but BTT (and Jyers) have this disabled while Creality has it enabled, but we need this, right?
          # Enable software PWM fan control
          configEnable FAN_SOFT_PWM Marlin/Configuration.h

          # TODO: Leaving these alone for now
          # Adjust min/max temperatures
          #configValue HEATER_0_MINTEMP 5 Marlin/Configuration.h
          #configValue BED_MINTEMP 5 Marlin/Configuration.h
          #configValue BED_MAXTEMP 120 Marlin/Configuration.h

          # TODO: Leaving this alone for now
          # Enable thermal protection for a heated chamber (which we don't have, so this is rather meaningless)
          #configEnable THERMAL_PROTECTION_CHAMBER Marlin/Configuration.h

          # Disable endstops interrupt compatibility (required to be disabled for BTT boards, however enabled by default in most configs)
          configDisable ENDSTOP_INTERRUPTS_FEATURE Marlin/Configuration.h

          # TODO: Leaving classic jerk alone for now
          # TODO: Should we disable this due to potential issues with Junction Deviation still?
          # Disable classic jerk
          #configDisable CLASSIC_JERK Marlin/Configuration.h

          # TODO: Leaving this alone for now
          # Disable extrapolating beyond the grid (enabled by default)
          #configDisable EXTRAPOLATE_BEYOND_GRID Marlin/Configuration.h

          # FIXME: Test if this needs to be enabled to get the manual leveling option in JyersUI?
          # Enable bed level corner adjustments
          #configEnable LEVEL_BED_CORNERS Marlin/Configuration.h

          # TODO: Leaving this alone for now
          # Enable mesh validation support
          #configEnable G26_MESH_VALIDATION Marlin/Configuration.h

          # Turn off display after 5 minutes
          configValue TOUCH_IDLE_SLEEP 300 Marlin/Configuration.h

          # Configure PID for the bed
          configValue DEFAULT_bedKp 129.98 Marlin/Configuration.h
          configValue DEFAULT_bedKi 25.00 Marlin/Configuration.h
          configValue DEFAULT_bedKd 450.59 Marlin/Configuration.h

          # Configure PID for the hotend
          configValue DEFAULT_Kp 23.26 Marlin/Configuration.h
          configValue DEFAULT_Ki 1.89 Marlin/Configuration.h
          configValue DEFAULT_Kd 71.41 Marlin/Configuration.h

          # Configure direct drive specific options
          if ($DIRECT_DRIVE); then
            # TODO: These are currently set to the defaults, so may need to be adjusted?
            # Adjust e-steps for direct drive
            #configValue DEFAULT_AXIS_STEPS_PER_UNIT "{ 80.0, 80.0, 400.0, 415 }" Marlin/Configuration.h
            configValue DEFAULT_AXIS_STEPS_PER_UNIT "{ 80.0, 80.0, 400.0, 432.7 }" Marlin/Configuration.h

            # FIXME: Adjust max feedrate for direct drive
            #configValue DEFAULT_MAX_FEEDRATE "{ 500, 500, 5, 25}" Marlin/Configuration.h
            # TODO: Trying to drastically bump up maximum values
            #configValue DEFAULT_MAX_FEEDRATE "{ 1000, 1000, 10, 100}" Marlin/Configuration.h
            #configValue DEFAULT_MAX_FEEDRATE "{ 1000, 1000, 25, 100}" Marlin/Configuration.h
            # TODO: Trying with default feedrates for now
            # TODO: Trying with doubled feedrates now, just to test it out
            configValue DEFAULT_MAX_FEEDRATE "{ 1000, 1000, 10, 500}" Marlin/Configuration.h

            # TODO: Testing lowering Z travel acceleration from 1000 to 500,
            #       in case this would not cause as much Z sync issues?
            configValue DEFAULT_TRAVEL_ACCELERATION 500 Marlin/Configuration.h

            # Increase Z jerk from 0.3 to 0.4
            configValue DEFAULT_ZJERK 0.4 Marlin/Configuration.h

            # TODO: These are currently set to the defaults, so may need to be adjusted?
            # Adjust max acceleration for direct drive
            #configValue DEFAULT_MAX_ACCELERATION "{ 500, 500, 100, 1000 }" Marlin/Configuration.h
            # TODO: Trying to drastically bump up maximum values
            #configValue DEFAULT_MAX_ACCELERATION "{ 1000, 1000, 100, 10000 }" Marlin/Configuration.h
            # TODO: Trying with default accelerations for now

            # TODO: Trying to drastically bump up maximum values
            #configValue DEFAULT_ACCELERATION 1000 Marlin/Configuration.h
            #configValue DEFAULT_RETRACT_ACCELERATION 1000 Marlin/Configuration.h
            #configValue DEFAULT_TRAVEL_ACCELERATION 1000 Marlin/Configuration.h
            # TODO: Trying with default accelerations for now

            # FIXME: X/Y/Z_CURRENT_HOME may need to be increased for faster homing!
            # TODO: Increased Z homing from 4mm/s to 25mm/s
            # Increase homing feed rates (homing speeds)
            #configValue HOMING_FEEDRATE_MM_M "{ \(50\*60\), \(50\*60\), \(25\*60\) }" Marlin/Configuration.h
            #configValue HOMING_FEEDRATE_MM_M "{ \(50\*60\), \(50\*60\), \(10\*60\) }" Marlin/Configuration.h
            configValue HOMING_FEEDRATE_MM_M "{ \(50\*60\), \(50\*60\), \(4\*60\) }" Marlin/Configuration.h

            # FIXME: Turns out that the first probe ignores Z_PROBE_FEEDRATE_FAST entirely,
            #        which means we will always hit the bed, unless we slow down the Z feedrate(s)

            # FIXME: If 25mm/s isn't too fast, try that instead of 15mm/s?
            #        But DO remember that Z_PROBE_FEEDRATE_SLOW is set to
            #        exactly HALF of Z_PROBE_FEEDRATE_FAST, which means that
            #        the higher the first approach probe, the higher the slow probes are!
            # TODO: Increased from 4mm/s to 15mm/s
            # Increase probing speed for the first approach when double-probing (MULTIPLE_PROBING is set to 2)
            #configValue Z_PROBE_FEEDRATE_FAST "\(15\*60\)" Marlin/Configuration.h
            # TODO: Nozzle was hitting the bed, so trying to go a little bit slower here
            #configValue Z_PROBE_FEEDRATE_FAST "\(8\*60\)" Marlin/Configuration.h

            # TODO: Maybe we should speed up Z_PROBE_FEEDRATE_SLOW too,
            #       instead of always being half of Z_PROBE_FEEDRATE_FAST?

            # FIXME: Our Z offset still keeps changing, but this might be from Z going out of sync?
            #        Needs further testing regardless, so will update as things progress.. (btw, bed was loose, eccentric nuts especially)
            # Adjust offsets for direct drive
            #configValue NOZZLE_TO_PROBE_OFFSET "{ -28.5, 6.0, -2.95 }" Marlin/Configuration.h
            #configValue NOZZLE_TO_PROBE_OFFSET "{ -29.0, 5.3, -1.40 }" Marlin/Configuration.h
            configValue NOZZLE_TO_PROBE_OFFSET "{ -29.0, 5.3, -1.40 }" Marlin/Configuration.h
            
            # Configure PID for the bed (60C)
            configValue DEFAULT_bedKp 82.96 Marlin/Configuration.h
            configValue DEFAULT_bedKi 15.95 Marlin/Configuration.h
            configValue DEFAULT_bedKd 287.61 Marlin/Configuration.h

            # Configure PID for the hotend (205C)
            configValue DEFAULT_Kp 20.40 Marlin/Configuration.h
            configValue DEFAULT_Ki 1.59 Marlin/Configuration.h
            configValue DEFAULT_Kd 65.29 Marlin/Configuration.h

            # FIXME: Adjust home offsets for direct drive, since they're now wrong?!
            #        But how/where? HOTEND_OFFSET_X/Y/Z?
          fi

          # Configure UBL/ABL specific options
          if ($UBL); then
            # Enable Universal Bed Leveling (UBL)
            configEnable AUTO_BED_LEVELING_UBL Marlin/Configuration.h

            # Increase default mesh inset for UBL
            configValue MESH_INSET 10 Marlin/Configuration.h

            # Disable UBL automatic mesh saving
            configDisable UBL_SAVE_ACTIVE_ON_M500 Marlin/Configuration.h
          else
            # Enable Automatic Bed Leveling (ABL)
            configEnable AUTO_BED_LEVELING_BILINEAR Marlin/Configuration.h
          fi
          
          # Configure DWIN touch screen support
          if ($TOUCH_SCREEN); then
            # Enable the touch screen support
            configEnable TOUCH_SCREEN Marlin/Configuration.h

            # Ensure Creality and Jyers UI DWIN displays are not enabled
            configDisable DWIN_CREALITY_LCD Marlin/Configuration.h
            configDisable DWIN_CREALITY_LCD_JYERSUI Marlin/Configuration.h

            # TODO: Configure the rest of the DWIN touch screen support,
            #       as well as use a custom DWIN_SET firmware for the display
            #       (see Marlin/Configuration.h, search for "DGUS Touch")
            # FIXME: This is just temporary and no idea if this would work:
            #        https://github.com/Desuuuu/DGUS-reloaded/releases/tag/1.0.2
            configEnable DGUS_LCD_UI_RELOADED Marlin/Configuration.h

            # DGUS_LCD_UI_RELOADED requires LEVEL_BED_CORNERS
            configEnable LEVEL_BED_CORNERS Marlin/Configuration.h
          fi

          if ($JUNCTION_DEVIATION); then
            # TODO: Trying to see if enabling Junction Deviation AND Linear Advance will cause issues or not
            # Enable junction deviation by disabling classic jerk handling
            configDisable CLASSIC_JERK Marlin/Configuration.h
          else
            # Disable junction deviation by enabling classic jerk handling
            configEnable CLASSIC_JERK Marlin/Configuration.h
          fi

          if ($LINEAR_ADVANCE); then
            # TODO: Trying with a higher e-jerk again, just for good measure!
            # Increase extruder jerk for linear advance + direct drive
            configValue DEFAULT_EJERK 15.0 Marlin/Configuration.h
            # TODO: Trying with default extruder jerk for now
            #configValue DEFAULT_EJERK 5.0 Marlin/Configuration.h
          else
            # Set default extruder jerk
            configValue DEFAULT_EJERK 5.0 Marlin/Configuration.h
          fi

          ## END OF CONFIGURATION.H



          ## BEGIN CONFIGURATION_ADV.H

          # Enable mainboard/controller fan control
          configEnable USE_CONTROLLER_FAN Marlin/Configuration_adv.h
          configValue CONTROLLER_FAN_PIN FAN2_PIN Marlin/Configuration_adv.h
          configValue CONTROLLERFAN_IDLE_TIME 10 Marlin/Configuration_adv.h

          # Enable automatic fan control for the extruder and parts cooler
          configValue E0_AUTO_FAN_PIN FAN1_PIN Marlin/Configuration_adv.h
          configValue COOLER_AUTO_FAN_PIN FAN_PIN Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (enabled in all configs)
          # TODO: Why would we keep this disabled? It's quicker, what are the drawbacks?
          # Disable quick homing
          #configDisable QUICK_HOME Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (enabled in all configs)
          # Disable power loss recovery
          #configDisable POWER_LOSS_RECOVERY Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (defaults are slightly higher)
          # Lower homing bump
          #configValue HOMING_BUMP_MM "{ 4, 4, 2 }" Marlin/Configuration_adv.h

          # Enable BLTouch High Speed mode (HS) depending on the firmware configuration
          if ($HIGH_SPEED); then
            configValue BLTOUCH_HS_MODE true Marlin/Configuration_adv.h
          else
            configDisable BLTOUCH_HS_MODE Marlin/Configuration_adv.h
          fi

          # Decreate probing delay for BLTouch
          # WARNING: Requires a BLTouch 3.0 or later
          configValue BLTOUCH_DELAY 200 Marlin/Configuration_adv.h

          # Enable 5V mode for BLTouch
          # WARNING: Make sure your board _and_ BLTouch (3.0 and above) use +5V and not +3.3V!
          configEnable BLTOUCH_SET_5V_MODE Marlin/Configuration_adv.h

          # TODO: This needs testing and supposedly fixes high CPU issues with this specific board, causing skipped steps etc.
          # Disable adaptive step smoothing
          configDisable ADAPTIVE_STEP_SMOOTHING Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (TODO: Needs testing, as supposedly related to disabling the above?)
          # Adjust slowdown divisor when disabling adaptive step smoothing (default is 2)
          #configValue SLOWDOWN_DIVISOR 8 Marlin/Configuration_adv.h

          # Enable DWIN display beep mute option
          configEnable SOUND_MENU_ITEM Marlin/Configuration_adv.h

          # Disable the DWIN display beeper/buzzer
          configEnable DISABLE_BUZZER Marlin/Configuration_adv.h

          # Enable additional display features (some are useful when used with OctoPrint for example)
          configEnable STATUS_MESSAGE_SCROLLING Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (enabled by default)
          # TODO: Why would BTT have this disabled?
          # Disable dynamic memory allocation in SD card menus
          #configValue SDSORT_DYNAMIC_RAM false Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now, pretty sure it'll default to the board values anyway
          # Set default SD card connection type
          configValue SDCARD_CONNECTION ONBOARD Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (disabled by default)
          # Enable UTF filename support
          #configEnable UTF_FILENAME_SUPPORT Marlin/Configuration_adv.h

          # Enable long filename support
          configEnable LONG_FILENAME_HOST_SUPPORT Marlin/Configuration_adv.h

          # TODO: This is already enabled by default
          # Enable scrolling filenames
          #configEnable SCROLL_LONG_FILENAMES Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (disabled by default)
          # Enable automatic reporting of SD card status
          #configEnable AUTO_REPORT_SD_STATUS Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (enabled by default)
          # Enable SD card host drive support
          #configDisable NO_SD_HOST_DRIVE Marlin/Configuration_adv.h
                  
          # Configure babystepping
          configEnable BABYSTEP_WITHOUT_HOMING Marlin/Configuration_adv.h
          configEnable BABYSTEP_ALWAYS_AVAILABLE Marlin/Configuration_adv.h
          #configEnable DOUBLECLICK_FOR_Z_BABYSTEPPING Marlin/Configuration_adv.h
          configEnable BABYSTEP_DISPLAY_TOTAL Marlin/Configuration_adv.h

          # Enable emergency parser
          configEnable EMERGENCY_PARSER Marlin/Configuration_adv.h

          # Enable advanced pausing for filament change (disabled by default, enabled in Jyers)
          configEnable ADVANCED_PAUSE_FEATURE Marlin/Configuration_adv.h

          # TODO: Disabling for now to use the defaults instead
          # TODO: This may need adjusting
          # Configure filament unload length (default is 100)
          #configValue FILAMENT_CHANGE_UNLOAD_LENGTH 400 Marlin/Configuration_adv.h

          # TODO: Disabling for now to use the defaults instead
          # TODO: This may need adjusting
          # Configure filament fast load length (default is 0)
          #configValue FILAMENT_CHANGE_FAST_LOAD_LENGTH 350 Marlin/Configuration_adv.h

          # TODO: Reverting this back to the default 10, but may need adjusting for direct drive?
          # Configure filament fast load feed rate (speed, default is 6, Jyers uses 10)
          #configValue FILAMENT_CHANGE_FAST_LOAD_FEEDRATE 6 Marlin/Configuration_adv.h

          # Enable head parking during pause and filament change (disabled by default, enabled in Jyers)
          configEnable PARK_HEAD_ON_PAUSE Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now
          # Run homing before changing filament (disabled by default)
          #configEnable HOME_BEFORE_FILAMENT_CHANGE Marlin/Configuration_adv.h

          # Enable display and g-code support for filament loading and unloading (disabled by default, enabled in Jyers)
          configEnable FILAMENT_LOAD_UNLOAD_GCODES Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now
          # Configure hybrid threshold (still disabled by default)
          #configValue Z_HYBRID_THRESHOLD 20 Marlin/Configuration_adv.h

          # TODO: Leaving these alone for now
          # Configure sensorless homing (still disably by default)
          #configValue X_STALL_SENSITIVITY 72 Marlin/Configuration_adv.h
          #configValue Y_STALL_SENSITIVITY 72 Marlin/Configuration_adv.h
          #configValue Z_STALL_SENSITIVITY 10 Marlin/Configuration_adv.h
          #configEnable IMPROVE_HOMING_RELIABILITY Marlin/Configuration_adv.h

          # TODO: Leaving these alone for now
          # Enable additional reporting etc. features
          #configEnable AUTO_REPORT_POSITION Marlin/Configuration_adv.h
          #configEnable M114_DETAIL Marlin/Configuration_adv.h
          #configEnable REPORT_FAN_CHANGE Marlin/Configuration_adv.h
          #configEnable HOST_PAUSE_M76 Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now, probably requires an LCD anyway
          # Enable fan control options in LCD (might not work with DWIN?)
          #configEnable CONTROLLER_FAN_EDITABLE Marlin/Configuration_adv.h

          # Enable showing remaining time (disabled by default, enabled in Jyers)
          configEnable LCD_SET_PROGRESS_MANUALLY Marlin/Configuration_adv.h
          configEnable SHOW_REMAINING_TIME Marlin/Configuration_adv.h
          configEnable USE_M73_REMAINING_TIME Marlin/Configuration_adv.h

          # Configure the current multiplier when holding/locked (default is 0.5)
          #configValue HOLD_MULTIPLIER "0.3" Marlin/Configuration_adv.h

          # TODO: The motors definitely run a bit hot now, but with the DD, it might just need all the power it can get?
          # FIXME: This might be too high, but it's exactly at 2 x 580 right now..
          #        https://github.com/bigtreetech/BIGTREETECH-SKR-V1.3/issues/515
          # Configure stepper motor driver currents
          configValue Z_CURRENT 1160 Marlin/Configuration_adv.h
          # TODO: Testing lower currents with DD
          #configValue Z_CURRENT 850 Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now
          # Enable stepper driver debugging
          #configEnable TMC_DEBUG Marlin/Configuration_adv.h

          # Enable meatpack g-code compression (disabled by default, enabled in Jyers)
          configEnable MEATPACK_ON_SERIAL_PORT_1 Marlin/Configuration_adv.h

          # Enable host actions commands (disabled by default, enabled in Jyers)
          configEnable HOST_ACTION_COMMANDS Marlin/Configuration_adv.h

          # Customize host action commands (disabled by default, enabled in Jyers)
          configEnable HOST_PROMPT_SUPPORT Marlin/Configuration_adv.h

          # Enable mechanical gantry calibration
          configEnable MECHANICAL_GANTRY_CALIBRATION Marlin/Configuration_adv.h

          # Configure additional options for mechanical gantry calibration
          configValue GANTRY_CALIBRATION_CURRENT "Z_CURRENT \/ 3" Marlin/Configuration_adv.h
          configValue GANTRY_CALIBRATION_EXTRA_HEIGHT 10 Marlin/Configuration_adv.h
          configValue GANTRY_CALIBRATION_FEEDRATE 500 Marlin/Configuration_adv.h
          configValue GANTRY_CALIBRATION_COMMANDS_POST \"G28\" Marlin/Configuration_adv.h

          # TODO: I think this only affects LCDs, not DWIN displays, so might be redundant?
          # Lower the bootscreen timeout
          configValue BOOTSCREEN_TIMEOUT 0 Marlin/Configuration_adv.h

          # TODO: Leaving these alone for now (all defaults seem fine/same, these would just be unnecessarily high)
          # Increase buffers etc.
          configEnable ADVANCED_OK Marlin/Configuration_adv.h
          configValue BLOCK_BUFFER_SIZE 64 Marlin/Configuration_adv.h
          configValue MAX_CMD_SIZE 96 Marlin/Configuration_adv.h
          configValue BUFSIZE 32 Marlin/Configuration_adv.h
          configValue TX_BUFFER_SIZE 32 Marlin/Configuration_adv.h

          # TODO: Leaving these alone for now
          # Set temperature watcher intervals (defaults are 40/180/180, Jyers uses 30/120/120)
          #configValue WATCH_TEMP_PERIOD 20 Marlin/Configuration_adv.h
          #configValue THERMAL_PROTECTION_BED_PERIOD 20 Marlin/Configuration_adv.h
          #configValue WATCH_BED_TEMP_PERIOD 60 Marlin/Configuration_adv.h

          # FIXME: #error "LCD_BACKLIGHT_TIMEOUT requires an LCD with encoder or keypad."
          # Turn off display after 30 seconds
          #configValue LCD_BACKLIGHT_TIMEOUT 30 Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now (disabled by default)
          # TODO: This MAY just help with our babystepping issues!
          # Enable integrated babystepping (experimental)
          #configEnable INTEGRATED_BABYSTEPPING Marlin/Configuration_adv.h

          # FIXME: Turns out we need this in order to adjust the Z probe offset at runtime!?
          # TODO: Leaving this alone for now (disabled by default)
          # Combine babystepping with the initial Z probe height
          configEnable BABYSTEP_ZPROBE_OFFSET Marlin/Configuration_adv.h

          # TODO: Leaving this alone for now, especially with INTEGRATED_BABYSTEPPING now disabled
          # Override default minimum steppper direction change delays (changes both post and pre dir delays)
          # NOTE: Default value for TSMC2209 is 60, which SHOULD work when INTEGRATED_BABYSTEPPING is also enabled!
          # https://github.com/MarlinFirmware/Marlin/issues/17323
          #configValue MINIMUM_STEPPER_POST_DIR_DELAY 100 Marlin/Configuration_adv.h

          # TODO: Research "firmware retraction" thoroughly and then enable/configure/test this!
          # https://marlinfw.org/docs/gcode/G010.html
          # https://marlinfw.org/docs/features/fwretract.html
          # https://blog.prusaprinters.org/slic3r-and-marlin-configuration-for-reprap-firmware-retraction-2_3686/
          # https://damsteen.nl/blog/2021/05/06/adjustable-retractions-during-printing-with-marlin-firmware-retractions
          #configEnable FWRETRACT Marlin/Configuration_adv.h

          # TODO: UPDATE: This makes much more noise and is faster/more aggressive,
          #               however it MAY have helped keep the Z axis motors in sync!
          # FIXME: This is a very experimental change to see if this helps at all!
          # Disable stealthchopping for the Z axis
          #configDisable STEALTHCHOP_Z Marlin/Configuration_adv.h

          # TODO: UPDATE: Nope, I still don't think this is worth it, plus it keeps the fans on 24/7
          # TODO: Testing this again, just in case
          # Disable Z axis idling when inactive
          #configValue DISABLE_INACTIVE_Z false Marlin/Configuration_adv.h

          # Enable assisted tramming
          configEnable ASSISTED_TRAMMING Marlin/Configuration_adv.h

          # FIXME: Calculate/calibrate this for our specific printer?!
          # Set assisted tramming probing positions
          #configValue TRAMMING_POINT_XY "{ {  20, 20 }, { 180,  20 }, { 180, 180 }, { 20, 180 } }" Marlin/Configuration_adv.h
          
          # Enable the assisted tramming wizard (likely not usable without an LCD)
          configEnable ASSISTED_TRAMMING_WIZARD Marlin/Configuration_adv.h

          # Enable moving the nozzle out of the way for adjusting when assisted tramming is enabled
          configEnable ASSISTED_TRAMMING_WAIT_POSITION Marlin/Configuration_adv.h

          # FIXME: Set this to 30 for M3 screws, 40 for M4 screws, 50 for M5 screws, etc.
          # Set the bed screw thread size (M3, M4, M5 etc.)
          #configValue TRAMMING_SCREW_THREAD 40 Marlin/Configuration_adv.h

          # Configure direct drive specific options
          if ($DIRECT_DRIVE); then
            # Set both to the full height of the nozzle (8.2mm)
            configValue FILAMENT_CHANGE_UNLOAD_LENGTH 8 Marlin/Configuration_adv.h
            configValue FILAMENT_CHANGE_FAST_LOAD_LENGTH 8 Marlin/Configuration_adv.h

            # FIXME: This will likely need more tweaking, specific to the Bondtech extruder motor!
            # Lower extruder current to roughly a half/third of the default (650 / 3 = 216)
            #configValue E0_CURRENT 300 Marlin/Configuration_adv.h
            # TODO: Since 400 works well enough, trying with 450 again
            configValue E0_CURRENT 450 Marlin/Configuration_adv.h
            # TODO: UPDATE: 400 works pretty well, I feel like!
            #configValue E0_CURRENT 400 Marlin/Configuration_adv.h
            # TODO: Further increasing extruder current, as 0.7 is the recommendation from Bondtech, I think?
            #configValue E0_CURRENT 650 Marlin/Configuration_adv.h

            # Enable stepper motor driver status monitoring
            # NOTE: This will monitor the TMC2209 drivers, drop the current
            #       and eventually stop if something goes wrong!
            configEnable MONITOR_DRIVER_STATUS Marlin/Configuration_adv.h

            # TODO: Disabling babystepping customizations for now
            # TODO: Not specific to direct drive, but using this for debugging right now!
            # Use millimeters instead of micro-steps for babystepping multiplicator
            #configEnable BABYSTEP_MILLIMETER_UNITS Marlin/Configuration_adv.h
            #configValue BABYSTEP_MULTIPLICATOR_Z 0.01 Marlin/Configuration_adv.h
            #configValue BABYSTEP_MULTIPLICATOR_XY BABYSTEP_MULTIPLICATOR_Z Marlin/Configuration_adv.h

            # Increase the babystepping amount from 0.0025mm to 0.01mm
            configValue BABYSTEP_MULTIPLICATOR_Z 4 Marlin/Configuration_adv.h

            # Set the X and Y axis babystepping to equal the Z axis
            configValue BABYSTEP_MULTIPLICATOR_XY BABYSTEP_MULTIPLICATOR_Z Marlin/Configuration_adv.h

            # Increase fine manual move amount from 0.025mm to 0.005mm
            configValue FINE_MANUAL_MOVE 0.005 Marlin/Configuration_adv.h

            # TODO: Disable just to see if it reduces the sounds?!
            # TODO: This needs HEAVY testing, as it may be too aggressive!
            # Disable stealthschop for the extruder
            #configDisable STEALTHCHOP_E Marlin/Configuration_adv.h

            # Enable and configure firmware retraction
            configEnable FWRETRACT Marlin/Configuration_adv.h
            configValue MAX_AUTORETRACT 2.0 Marlin/Configuration_adv.h
            # FIXME: Adjust retract length and feedrate to match known good values for the Bondtech extruder!
            configValue RETRACT_LENGTH 1 Marlin/Configuration_adv.h
            configValue RETRACT_FEEDRATE 25 Marlin/Configuration_adv.h

            if ($LINEAR_ADVANCE); then
              # Enable linear advance for direct drive
              configEnable LIN_ADVANCE Marlin/Configuration_adv.h
              #configValue LIN_ADVANCE_K 0.15 Marlin/Configuration_adv.h
              # TODO: Calibrated K factor to exactly 0.25 (0.20 is also good)
              #configValue LIN_ADVANCE_K 0.25 Marlin/Configuration_adv.h
              # TODO: Re-calibrated and 0.15 now looks the best!
              configValue LIN_ADVANCE_K 0.15 Marlin/Configuration_adv.h
              configEnable EXPERIMENTAL_SCURVE Marlin/Configuration_adv.h
              configEnable ALLOW_LOW_EJERK Marlin/Configuration_adv.h
            fi
          fi

          # Configure UBL/ABL specific options
          if ($UBL); then
            # Disable retrying bed leveling after a failed attempt
            configDisable G29_RETRY_AND_RECOVER Marlin/Configuration_adv.h
          else
            # Enable retrying bed leveling after a failed attempt
            configEnable G29_RETRY_AND_RECOVER Marlin/Configuration_adv.h
          fi

          ## END OF CONFIGURATION_ADV.H
        env:
          GRID: ${{ matrix.grid }}
          HIGH_SPEED: ${{ matrix.high-speed }}
          DIRECT_DRIVE: ${{ matrix.direct-drive }}
          TARGET_BRANCH: ${{ env.TARGET_BRANCH }}
          UBL: ${{ matrix.ubl }}
          TOUCH_SCREEN: ${{ matrix.touch-screen }}
          LINEAR_ADVANCE: ${{ matrix.linear-advance }}
          JUNCTION_DEVIATION: ${{ matrix.junction-deviation }}

      - name: Compile Firmware
        id: compile_firmware
        run: |-
          # Generate a name for the firmware and export it as a step output
          if ($HIGH_SPEED); then HS_LABEL=-HS; else HS_LABEL=; fi;
          if ($DIRECT_DRIVE); then DD_LABEL=-DD; else DD_LABEL=; fi;
          if ($UBL); then UBL_LABEL=-UBL; else UBL_LABEL=-ABL; fi;
          if ($LINEAR_ADVANCE); then LINEAR_ADVANCE_LABEL=-LIN; else LINEAR_ADVANCE_LABEL=; fi;
          if ($JUNCTION_DEVIATION); then JUNCTION_DEVIATION_LABEL=-JD; else JUNCTION_DEVIATION_LABEL=; fi;
          if ($TOUCH_SCREEN); then TOUCH_SCREEN_LABEL=-TOUCH; else TOUCH_SCREEN_LABEL=; fi;
          FIRMWARE_NAME="E3V2-UBL-BLTouch-${GRID}x${GRID}${HS_LABEL}${DD_LABEL}${UBL_LABEL}${LINEAR_ADVANCE_LABEL}${JUNCTION_DEVIATION_LABEL}${TOUCH_SCREEN_LABEL}-${BOARD}-${VERSION}"
          echo "::set-output name=name::${FIRMWARE_NAME}"
          echo "::set-output name=filename::${FIRMWARE_NAME}.bin"

          ## TODO: Get the board env name dynamically instead?
          # Compile the firmware
          pio run -e $BOARD

          # Copy the firmware and configuration files to a named temporary folder
          mkdir -p "temp/${FIRMWARE_NAME}"
          ## TODO: Get the board env name dynamically instead?
          cp .pio/build/$BOARD/firmware.bin "temp/${FIRMWARE_NAME}/firmware.bin"
          cp Marlin/Configuration.h "temp/${FIRMWARE_NAME}/Configuration.h"
          cp Marlin/Configuration_adv.h "temp/${FIRMWARE_NAME}/Configuration_adv.h"

          # Include the latest DWIN display firmware with all build artifacts
          cp -R "Configurations/config/examples/Creality/Ender-3 V2/LCD Files/DWIN_SET" "temp/${FIRMWARE_NAME}/DWIN_SET"
        env:
          BOARD: ${{ matrix.board }}
          GRID: ${{ matrix.grid }}
          HIGH_SPEED: ${{ matrix.high-speed }}
          DIRECT_DRIVE: ${{ matrix.direct-drive }}
          VERSION: ${{ env.RELEASE_VERSION }}
          UBL: ${{ matrix.ubl }}
          TOUCH_SCREEN: ${{ matrix.touch-screen }}
          LINEAR_ADVANCE: ${{ matrix.linear-advance }}
          JUNCTION_DEVIATION: ${{ matrix.junction-deviation }}

      - name: Publish Artifacts
        ## FIXME: Artifact uploading is broken with act, the server doesn't work, so disabling for now
        if: env.ACT != 'true'
        uses: actions/upload-artifact@v2
        with:
          # name: ${{ steps.compile_firmware.outputs.filename }}
          # name: ${{ steps.compile_firmware.outputs.name }}.zip
          name: ${{ steps.compile_firmware.outputs.name }}
          # path: temp/build.bin
          path: temp/
