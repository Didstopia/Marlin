# Based on the following workflow by ColinM9991:
# https://github.com/ColinM9991/Marlin/blob/skr-mini-e3/.github/workflows/compile-configs-custom.yml

name: Build BTT SKR Mini E3 V3.0 (Ender 3 V2)

on:
  # Trigger custom firmwares builds only on specific branches
  push:
    branches:
      - 2.0.x
      - bugfix-2.0.x
  
  # Allow manual builds with a configurable target branch
  workflow_dispatch:
    inputs:
      targetBranch:
        description: 'Target Branch'
        required: true
        default: 'bugfix-2.0.x'

jobs:

  build-firmwares:
    name: Build Firmwares
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # branch: [2.0.x, bugfix-2.0.x]
        board: [STM32G0B1RE_btt]
        ## FIXME: Figure out which versions we want to build/support
        grid: [3, 5, 10, 15]
        # grid: [10]
        high-speed: [true, false]
    steps:
    
    - name: Prepare Target Branch
      run: |
        # Target branch defaults to base ref
        TARGET_BRANCH=${{ env.GITHUB_BASE_REF }}
        
        # Allow overriding the target branch with manual builds
        OVERRIDE_TARGET_BRANCH=${{ github.event.inputs.targetBranch }}
        if [ ! -z "${OVERRIDE_TARGET_BRANCH}" ]; then
          TARGET_BRANCH=${OVERRIDE_TARGET_BRANCH}
        fi
        
        # Ensure that we have a target branch
        if [ -z "${TARGET_BRANCH}" ]; then
          echo "::error title=Missing target branch::Could not detect target branch, unable to continue"
          exit 1
        else
          # Export the final target branch as a global environment variable
          echo "TARGET_BRANCH=${TARGET_BRANCH}" >> $GITHUB_ENV
        fi
    
    # - name: Checkout Repository (${{ matrix.branch }})
    # - name: Checkout Repository (${{ env.GITHUB_BASE_REF }})
    - name: Checkout Repository (${{ env.TARGET_BRANCH }})
      uses: actions/checkout@v2
      with:
        # ref: ${{ matrix.branch }}
        # ref: ${{ env.CURRENT_BRANCH }}
        ref: ${{ env.TARGET_BRANCH }}
        persist-credentials: false
        
    - name: Prepare Environment (${{ env.TARGET_BRANCH }})
      run: echo "RELEASE_VERSION=$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}" >> $GITHUB_ENV
    
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    
    - name: Setup Python
      uses: actions/setup-python@v2
      
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio
    
    - name: Configure Firmware (${{ env.TARGET_BRANCH }})
      id: configure_firmware
      run: |
        # Copy the latest default Ender 3 V2 config files in place
        git clone -b ${{ env.TARGET_BRANCH }} https://github.com/MarlinFirmware/Configurations.git Configurations
        cp "Configurations/config/examples/Creality/Ender-3 V2/CrealityV422/CrealityUI/Configuration.h" Marlin/Configuration.h
        cp "Configurations/config/examples/Creality/Ender-3 V2/CrealityV422/CrealityUI/Configuration_adv.h" Marlin/Configuration_adv.h
        
        # Patch for DWIN support with Jyers UI
        sed -i -E "s/^[^\/]*[ ]*#error \"DWIN_CREALITY_LCD requires a custom cable.*$/\/\/&:/g" Marlin/src/pins/stm32g0/pins_BTT_SKR_MINI_E3_V3_0.h
        ## FIXME: No longer necessary on bugfix-2.0.x, comment out when 2.0.x branch gets the fix merged?
        sed -i "s/DWIN_CREALITY_LCD/DWIN_CREALITY_LCD_JYERSUI/g" Marlin/src/pins/stm32g0/pins_BTT_SKR_MINI_E3_V3_0.h
        ## TODO: Configure the following extra features from BTT:
        ## - PSU
        
        
        
        ## BEGIN CONFIGURATION_ADV.H
        
        # Set a custom author
        AUTHOR="Didstopia, BTT-SKR-Mini-E3-V3.0"
        sed -i -E "s/(.*STRING_CONFIG_H_AUTHOR \"\()(.*)(\)\".*)/\1${AUTHOR}\3/g" Marlin/Configuration.h
        
        # Fix the serial port
        sed -i "s/#define SERIAL_PORT .*/#define SERIAL_PORT -1/g" Marlin/Configuration.h
        
        # Change to the correct motherboard
        sed -i "s/#define MOTHERBOARD .*/#define MOTHERBOARD BOARD_BTT_SKR_MINI_E3_V3_0/g" Marlin/Configuration.h
        
        # Change to the correct baud rate
        sed -i "s/#define BAUDRATE .*/#define BAUDRATE 115200/g" Marlin/Configuration.h
        
        # Set a custom machine name
        sed -i "s/#define CUSTOM_MACHINE_NAME .*/#define CUSTOM_MACHINE_NAME \"Ender-3 V2 (BTT SKR Mini E3)\"/g" Marlin/Configuration.h
        
        # Set default/custom hotend PID values (calibrated with 200C stock hotend temperature)
        sed -i "s/#define DEFAULT_Kp .*/#define DEFAULT_Kp 23.20/g" Marlin/Configuration.h
        sed -i "s/#define DEFAULT_Ki .*/#define DEFAULT_Ki 1.88/g" Marlin/Configuration.h
        sed -i "s/#define DEFAULT_Kd .*/#define DEFAULT_Kd 71.69/g" Marlin/Configuration.h
        
        # Set default/custom bed PID values (calibrated with 60C magnetic bed temperature)
        sed -i "s/#define DEFAULT_bedKp .*/#define DEFAULT_bedKp 103.83/g" Marlin/Configuration.h
        sed -i "s/#define DEFAULT_bedKi .*/#define DEFAULT_bedKi 20.44/g" Marlin/Configuration.h
        sed -i "s/#define DEFAULT_bedKd .*/#define DEFAULT_bedKd 351.64/g" Marlin/Configuration.h
        
        ## TODO: Creality's firmware has this set to 1000 so this needs more testing!
        # Set maximum length to extrude within a single extrusion
        sed -i "s/#define EXTRUDE_MAXLENGTH .*/#define EXTRUDE_MAXLENGTH 600/g" Marlin/Configuration.h 
        
        # Change the motor drivers
        sed -i -E "s/#define (X|Y|Z|E0)_DRIVER_TYPE .*/#define \1_DRIVER_TYPE TMC2209/g" Marlin/Configuration.h
        
        ## TODO: Set this after calibrating e-steps on our device
        # Set default/custom steps per unit, per axis
        sed -i "s/#define DEFAULT_AXIS_STEPS_PER_UNIT.*/#define DEFAULT_AXIS_STEPS_PER_UNIT { 80, 80, 400, 93 }/g" Marlin/Configuration.h
        
        ## TODO: This is less than half of what Creality's firmware uses (500 for X and Y) and as such needs more testing!
        # Set default/custom maximum feedrate (movement speed)
        sed -i "s/#define DEFAULT_MAX_FEEDRATE.*/#define DEFAULT_MAX_FEEDRATE { 200, 200, 5, 25}/g" Marlin/Configuration.h
        
        ## TODO: This MASSIVELY bumps up the maximum acceleration speeds compared to Creality's stock firmware! Beware!
        # Set default/custom maximum acceleration
        sed -i "s/#define DEFAULT_MAX_ACCELERATION.*/#define DEFAULT_MAX_ACCELERATION { 1000, 1000, 100, 10000 }/g" Marlin/Configuration.h
        
        ## TODO: This is half of what Creality's firmware uses and needs more testing!
        # Set default/custom maximum acceleration while moving/traveling
        sed -i "s/#define DEFAULT_TRAVEL_ACCELERATION.*/#define DEFAULT_TRAVEL_ACCELERATION 500/g" Marlin/Configuration.h
        
        ## TODO: This MAY be causing issues with extruder skipping?
        ##       Creality and Jyers use 5, BTT uses 15, but neither have Linear Advance enabled, unlike BTT!
        ## NOTE: This issues mentions that 5.0 is not even close to enough for Linear Advance to function properly:
        ##       https://github.com/MarlinFirmware/Marlin/issues/20649
        # Increase extruder jerk when using Linear Advance
        sed -i "s/#define DEFAULT_EJERK .*/#define DEFAULT_EJERK 15.0/g" Marlin/Configuration.h
        
        ## TODO: This MAY cause issues and is disabled in Creality's stock firmware!
        # Enable S-Curve Acceleration
        sed -i "s/[^ ]*#define S_CURVE_ACCELERATION/#define S_CURVE_ACCELERATION/g" Marlin/Configuration.h
        
        ## TODO: Use this instead if enabling it causes any issues
        # Disable S-Curve acceleration
        #sed -i "s/[^ ]*#define S_CURVE_ACCELERATION/\/\/#define S_CURVE_ACCELERATION/g" Marlin/Configuration.h
        
        # Disable Z axis endstop switch support (we use BLTouch/CRTouch instead)
        sed -i "s/[^ ]*#define Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN/\/\/#define Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN/g" Marlin/Configuration.h
        
        # Enable Z homing using a probe
        sed -i "s/[^ ]*#define USE_PROBE_FOR_Z_HOMING/#define USE_PROBE_FOR_Z_HOMING/g" Marlin/Configuration.h
        
        # Enable BLTouch/CRTouch support
        sed -i "s/[^ ]*#define BLTOUCH/#define BLTOUCH/g" Marlin/Configuration.h
        
        ## TODO: Trying with a CRTouch right now, which meant lowering the Z offset, however there's a Z offset bug in Marlin atm too..
        # Set default/custom nozzle offsets
        #sed -i "s/#define NOZZLE_TO_PROBE_OFFSET .*/#define NOZZLE_TO_PROBE_OFFSET { -45.5, -6.0, -1.10 }/g" Marlin/Configuration.h
        sed -i "s/#define NOZZLE_TO_PROBE_OFFSET .*/#define NOZZLE_TO_PROBE_OFFSET { -45.5, -6.0, -1.25 }/g" Marlin/Configuration.h
        
        # Increase the probing margin (for BLTouch/UBL)
        sed -i "s/#define PROBING_MARGIN .*/#define PROBING_MARGIN 20/g" Marlin/Configuration.h

        # Increase X/Y axis feed rate (travel speed) when probing (for BLTouch/UBL)
        sed -i "s/#define XY_PROBE_FEEDRATE .*/#define XY_PROBE_FEEDRATE (133*60)/g" Marlin/Configuration.h

        # Enable multiple probings (for BLTouch/UBL)
        sed -i "s/[^ ]*#define MULTIPLE_PROBING .*/#define MULTIPLE_PROBING 2/g" Marlin/Configuration.h

        # Enable Z probe testing (for BLTouch/UBL)
        sed -i "s/[^ ]*#define Z_MIN_PROBE_REPEATABILITY_TEST/#define Z_MIN_PROBE_REPEATABILITY_TEST/g" Marlin/Configuration.h
        
        # Invert axis motor directions
        sed -i -E "s/#define INVERT_(X|Y|E0)_DIR .*/#define INVERT_\1_DIR true/g" Marlin/Configuration.h
        sed -i "s/#define INVERT_Z_DIR .*/#define INVERT_Z_DIR false/g" Marlin/Configuration.h
        
        # Require homing after steppers have deactivated/unlocked
        sed -i "s/[^ ]*#define HOME_AFTER_DEACTIVATE/#define HOME_AFTER_DEACTIVATE/g" Marlin/Configuration.h
        
        ## TODO: Why are we increasing instead of decreasing? For probing/UBL safety?
        # Increase bed size for probing (for BLTouch/UBL)
        sed -i -E "s/#define (X|Y)_BED_SIZE .*/#define \1_BED_SIZE 230/g" Marlin/Configuration.h
        
        # Extend maximum X position for better probe reach (for BLTouch/UBL)
        sed -i "s/#define X_MAX_POS .*/#define X_MAX_POS X_BED_SIZE + 15/g" Marlin/Configuration.h
        
        ## TODO: Figure out a good value for this so we don't have to push against our printed endstops TOO hard!
        # Lower maximum Z position for better mechanical gantry calibration
        sed -i "s/#define >_MAX_POS .*/#define X_MAX_POS 250/g" Marlin/Configuration.h

        # Enable filament runout sensor
        sed -i "s/[^ ]*#define FILAMENT_RUNOUT_SENSOR/#define FILAMENT_RUNOUT_SENSOR/g" Marlin/Configuration.h
        
        ## TODO: Add a default/custom filament runout sensor distance
        # Set the default/custom runout sensor filament distance
        sed -i "s/[^ ]*#define FILAMENT_RUNOUT_DISTANCE_MM .*/#define FILAMENT_RUNOUT_DISTANCE_MM 0/g" Marlin/Configuration.h
        
        # Enable Universal Bed Leveling (UBL)
        sed -i "s/[^ ]*#define AUTO_BED_LEVELING_UBL/#define AUTO_BED_LEVELING_UBL/g" Marlin/Configuration.h
        
        # Enable leveling after completion (for BLTouch/UBL)
        sed -i "s/[^ ]*#define RESTORE_LEVELING_AFTER_G28/#define RESTORE_LEVELING_AFTER_G28/g" Marlin/Configuration.h
        
        # Enable preheating before leveling
        sed -i "s/[^ ]*#define PREHEAT_BEFORE_LEVELING/#define PREHEAT_BEFORE_LEVELING/g" Marlin/Configuration.h
        
        # Enable leveling debugging
        sed -i "s/[^ ]*#define DEBUG_LEVELING_FEATURE/#define DEBUG_LEVELING_FEATURE/g" Marlin/Configuration.h
        
        # Set the leveling grid size for the current firmware configuration
        sed -i "s/#define GRID_MAX_POINTS_X .*/#define GRID_MAX_POINTS_X $GRID/g" Marlin/Configuration.h
        
        # Increase default mesh inset for UBL
        sed -i "s/[^ ]*#define MESH_INSET .*/#define MESH_INSET 10/g" Marlin/Configuration.h
        
        ## TODO: Why would we want to disable this though?
        # Disable UBL automatic saving
        sed -i "s/[^ ]*#define UBL_SAVE_ACTIVE_ON_M500/\/\/#define UBL_SAVE_ACTIVE_ON_M500/g" Marlin/Configuration.h
        
        # Enable safe homing on the Z axis
        sed -i "s/[^ ]*#define Z_SAFE_HOMING/#define Z_SAFE_HOMING/g" Marlin/Configuration.h
        
        ## TODO: This may need tweaking and Creality's firmware has MUCH higher values?!
        # Reduce homing feed rate (homing speed)
        sed -i "s/#define HOMING_FEEDRATE_MM_M .*/#define HOMING_FEEDRATE_MM_M { \(20\*60\), \(20\*60\), \(4\*60\) }/g" Marlin/Configuration.h
        
        ## TODO: Why do we want this enabled? Purely for debugging, right?
        # Enable EEPROM feedback
        sed -i "s/[^ ]*#define EEPROM_CHITCHAT/#define EEPROM_CHITCHAT/g" Marlin/Configuration.h
        
        # Clear EEPROM on startup after flashing a new firmware
        sed -i "s/[^ ]*#define EEPROM_INIT_NOW/#define EEPROM_INIT_NOW/g" Marlin/Configuration.h
        
        ## TODO: Setup custom heating profiles here (eg. PREHEAT_1_LABEL)
        
        # Enable nozzle parking when idle
        sed -i "s/[^ ]*#define NOZZLE_PARK_FEATURE/#define NOZZLE_PARK_FEATURE/g" Marlin/Configuration.h
        
        # Increase Z axis while nozzle parking
        sed -i "s/#define NOZZLE_PARK_Z_RAISE_MIN .*/#define NOZZLE_PARK_Z_RAISE_MIN 5/g" Marlin/Configuration.h
        
        ## FIXME: This also catches "PRINTCOUNTER_SAVE_INTERVAL" as is and should be fixed!
        # Enable print counting statistics
        sed -i "s/[^ ]*#define PRINTCOUNTER/#define PRINTCOUNTER/g" Marlin/Configuration.h
        
        # Switch from Creality UI to Jyers UI
        sed -i "s/[^ ]*#define DWIN_CREALITY_LCD/\/\/#define DWIN_CREALITY_LCD/g" Marlin/Configuration.h
        sed -i "s/[^ ]*#define DWIN_CREALITY_LCD_JYERSUI/#define DWIN_CREALITY_LCD_JYERSUI/g" Marlin/Configuration.h
        
        ## TODO: Configure Creality DWIN touch screen support here (if we ever get it working in the first place)
        
        # Enable software PWM fan control
        sed -i "s/[^ ]*#define FAN_SOFT_PWM/#define FAN_SOFT_PWM/g" Marlin/Configuration.h
        
        ## TODO: Enable and configure NeoPixel LED driver support here
        
        ## END OF CONFIGURATION.H
        
        
        
        ## BEGIN CONFIGURATION_ADV.H
        
        # Enable mainboard/controller fan control
        sed -i "s/[^ ]*#define USE_CONTROLLER_FAN/#define USE_CONTROLLER_FAN/g" Marlin/Configuration_adv.h
        sed -i "s/[^ ]*#define CONTROLLER_FAN_PIN .*/#define CONTROLLER_FAN_PIN FAN2_PIN/g" Marlin/Configuration_adv.h
        
        ## TODO: The config notes seem to indicate that this never actually shuts down the fan?!
        # Enable automatic fan control for the extruder and parts cooler
        sed -i "s/#define E0_AUTO_FAN_PIN .*/#define E0_AUTO_FAN_PIN FAN1_PIN/g" Marlin/Configuration_adv.h
        sed -i "s/#define COOLER_AUTO_FAN_PIN .*/#define COOLER_AUTO_FAN_PIN FAN_PIN/g" Marlin/Configuration_adv.h
        
        ## TODO: Creality's firmware uses { 5, 5, 2 } instead, so this needs further testing!
        # Lower homing bump
        sed -i "s/#define HOMING_BUMP_MM .*/#define HOMING_BUMP_MM { 4, 4, 2 }/g" Marlin/Configuration_adv.h
        
        # Enable BLTouch High Speed mode (HS) depending on the firmware configuration
        if ($HIGH_SPEED); then HS_ENABLED=; else HS_ENABLED='\/\/'; fi;
        sed -i "s/[^ ]*#define BLTOUCH_HS_MODE .*/$HS_ENABLED#define BLTOUCH_HS_MODE true/g" Marlin/Configuration_adv.h
        
        ## TODO: Disable inactive Z to reduce sag with dual Z setups?
        
        # Enable DWIN display beep mute option
        sed -i "s/[^ ]*#define SOUND_MENU_ITEM/#define SOUND_MENU_ITEM/g" Marlin/Configuration_adv.h

        ## TODO: Do we need this and does this work?
        # Enable long filename support
        sed -i "s/[^ ]*#define LONG_FILENAME_HOST_SUPPORT/#define LONG_FILENAME_HOST_SUPPORT/g" Marlin/Configuration_adv.h

        ## TODO: Do we need this and does this work?
        # Enable scrolling filenames
        sed -i "s/[^ ]*#define SCROLL_LONG_FILENAMES/#define SCROLL_LONG_FILENAMES/g" Marlin/Configuration_adv.h

        ## TODO: Disabling this in case it helps speed up the SD card insertion/removal process?
        # Enable SD card automatic status reporting
        #sed -i "s/[^ ]*#define AUTO_REPORT_SD_STATUS/#define AUTO_REPORT_SD_STATUS/g" Marlin/Configuration_adv.h
        
        ## TODO: Do we need this and does this work?
        # Set SD card connection to be "onboard"
        sed -i "s/[^ ]*#define SDCARD_CONNECTION .*/#define SDCARD_CONNECTION ONBOARD/g" Marlin/Configuration_adv.h
        
        ## TODO: Not sure if this'll even work, but worth a try!
        ## TODO: If it doesn't work, try also enabling "DISKIO_HOST_DRIVE"!
        # Enable access to the SD card over USB
        sed -i "s/[^ ]*#define NO_SD_HOST_DRIVE/\/\/#define NO_SD_HOST_DRIVE/g" Marlin/Configuration_adv.h
        
        ## TODO: Does this show the remaining size? Or the time remaining when loading data? Or something else?
        # Enable SD card percentage next to the progress bar
        sed -i "s/[^ ]*#define SHOW_SD_PERCENT/#define SHOW_SD_PERCENT/g" Marlin/Configuration_adv.h
        
        ## TODO: What would happen if we enable "SD_IGNORE_AT_STARTUP" and go to the Print Menu? Would it then be enabled?
        ##       Time to test this by enabling this option!
        ## FIXME: Supposedly this is what allows USB access to the SD card on boot, HOWEVER I sure hope this doesn't mean we lose firmware flashing?!
        ## FIXME: error "SD_IGNORE_AT_STARTUP is incompatible with POWER_LOSS_RECOVERY -> disabling for now
        #sed -i "s/[^ ]*#define SD_IGNORE_AT_STARTUP/#define SD_IGNORE_AT_STARTUP/g" Marlin/Configuration_adv.h
        
        ## TODO: Does this cause any issues? It's disabled in Creality's firmware!
        # Enable babystepping without homing
        sed -i "s/[^ ]*#define BABYSTEP_WITHOUT_HOMING/#define BABYSTEP_WITHOUT_HOMING/g" Marlin/Configuration_adv.h
        
        ## TODO: Does this cause any issues? It's disabled in Creality's firmware!
        # Enable babystepping always available
        sed -i "s/[^ ]*#define BABYSTEP_ALWAYS_AVAILABLE/#define BABYSTEP_ALWAYS_AVAILABLE/g" Marlin/Configuration_adv.h
        
        ## TODO: Do we need this and does this work?
        # Enable displaying of babysteps
        sed -i "s/[^ ]*#define BABYSTEP_DISPLAY_TOTAL/#define BABYSTEP_DISPLAY_TOTAL/g" Marlin/Configuration_adv.h
        
        ## TODO: This is disabled in Creality's firmware and needs further testing!
        # Enable linear advance
        sed -i "s/[^ ]*#define LIN_ADVANCE/#define LIN_ADVANCE/g" Marlin/Configuration_adv.h
        
        ## TODO: Again no idea if this will even work correctly!
        # Tweak linear advance configuration
        sed -i "s/#define LIN_ADVANCE_K .*/#define LIN_ADVANCE_K 0.0/g" Marlin/Configuration_adv.h
        
        ## TODO: Again no idea if this will even work correctly!
        # Enable s-curve acceleration with linear advance
        sed -i "s/[^ ]*#define EXPERIMENTAL_SCURVE/#define EXPERIMENTAL_SCURVE/g" Marlin/Configuration_adv.h
        
        ## TODO: This is disabled in Creality's firmware and needs further testing!
        # Tweak ARC configuration
        sed -i "s/[^ ]*#define ARC_P_CIRCLES/#define ARC_P_CIRCLES/g" Marlin/Configuration_adv.h
        
        # Enable emergency parser
        sed -i "s/[^ ]*#define EMERGENCY_PARSER/#define EMERGENCY_PARSER/g" Marlin/Configuration_adv.h
        
        # Enable advanced pausing for filament change
        sed -i "s/[^ ]*#define ADVANCED_PAUSE_FEATURE/#define ADVANCED_PAUSE_FEATURE/g" Marlin/Configuration_adv.h
        
        ## TODO: This is "100" in Creality's firmware, 4x in BTT's recommendations, but which is correct?! (0 in Jyers)
        # Configure filament unload length
        #sed -i "s/#define FILAMENT_CHANGE_UNLOAD_LENGTH .*/#define FILAMENT_CHANGE_UNLOAD_LENGTH 400/g" Marlin/Configuration_adv.h
        
        ## TODO: This is "6" in Creality's firmware, "10" in BTT's recommendations, but which is correct?! (10 in Jyers)
        # Configure filament fast load feed rate (speed)
        sed -i "s/#define FILAMENT_CHANGE_FAST_LOAD_FEEDRATE .*/#define FILAMENT_CHANGE_FAST_LOAD_FEEDRATE 10/g" Marlin/Configuration_adv.h
        
        ## TODO: This is "0" in Creality's firmware, "350" in BTT's recommendations, but which is correct?! (0 in Jyers)
        # Configure filament fast load length
        #sed -i "s/#define FILAMENT_CHANGE_FAST_LOAD_LENGTH .*/#define FILAMENT_CHANGE_FAST_LOAD_LENGTH 350/g" Marlin/Configuration_adv.h
        
        # Enable head parking during pause and filament change
        sed -i "s/[^ ]*#define PARK_HEAD_ON_PAUSE/#define PARK_HEAD_ON_PAUSE/g" Marlin/Configuration_adv.h
        
        # Enabling homing before parking for filament change
        sed -i "s/[^ ]*#define HOME_BEFORE_FILAMENT_CHANGE/#define HOME_BEFORE_FILAMENT_CHANGE/g" Marlin/Configuration_adv.h
        
        # Enable display and g-code support for filament loading and unloading
        sed -i "s/[^ ]*#define FILAMENT_LOAD_UNLOAD_GCODES/#define FILAMENT_LOAD_UNLOAD_GCODES/g" Marlin/Configuration_adv.h
        
        # Configure the current multiplier when holding/locked
        sed -i "s/#define HOLD_MULTIPLIER .*/#define HOLD_MULTIPLIER 0.3/g" Marlin/Configuration_adv.h
        
        # Configure stepper motor driver currents
        sed -i "s/#define X_CURRENT .*/#define X_CURRENT 580/g" Marlin/Configuration_adv.h
        sed -i "s/#define Y_CURRENT .*/#define Y_CURRENT 580/g" Marlin/Configuration_adv.h
        sed -i "s/#define Z_CURRENT .*/#define Z_CURRENT 725/g" Marlin/Configuration_adv.h
        sed -i "s/#define E0_CURRENT .*/#define E0_CURRENT 650/g" Marlin/Configuration_adv.h
        
        # Configure stepper motor driver currents when homing
        sed -i "s/#define X_CURRENT_HOME .*/#define X_CURRENT_HOME X_CURRENT \/ 2/g" Marlin/Configuration_adv.h
        sed -i "s/#define Y_CURRENT_HOME .*/#define Y_CURRENT_HOME Y_CURRENT \/ 2/g" Marlin/Configuration_adv.h
        sed -i "s/#define Z_CURRENT_HOME .*/#define Z_CURRENT_HOME Z_CURRENT \/ 2/g" Marlin/Configuration_adv.h
        
        # Change the default chopper voltage from 12V to 24V
        sed -i "s/#define CHOPPER_TIMING CHOPPER_DEFAULT_12V/#define CHOPPER_TIMING CHOPPER_DEFAULT_24V/g" Marlin/Configuration_adv.h

        # Enable stepper driver debugging
        sed -i "s/[^ ]*#define TMC_DEBUG/#define TMC_DEBUG/g" Marlin/Configuration_adv.h
        
        # Enable automatic position reports
        sed -i "s/[^ ]*#define AUTO_REPORT_POSITION/#define AUTO_REPORT_POSITION/g" Marlin/Configuration_adv.h
        
        # Customize the position reporting
        sed -i "s/[^ ]*#define M114_DETAIL/#define M114_DETAIL/g" Marlin/Configuration_adv.h
        sed -i "s/[^ ]*#define REPORT_FAN_CHANGE/#define REPORT_FAN_CHANGE/g" Marlin/Configuration_adv.h
        
        # Enable meatpack g-code compression
        sed -i "s/[^ ]*#define MEATPACK_ON_SERIAL_PORT_1/#define MEATPACK_ON_SERIAL_PORT_1/g" Marlin/Configuration_adv.h
        
        # Enable host actions commands
        sed -i "s/[^ ]*#define HOST_ACTION_COMMANDS/#define HOST_ACTION_COMMANDS/g" Marlin/Configuration_adv.h
        
        # Customize host action commands
        sed -i "s/[^ ]*#define HOST_PAUSE_M76/#define HOST_PAUSE_M76/g" Marlin/Configuration_adv.h
        sed -i "s/[^ ]*#define HOST_PROMPT_SUPPORT/#define HOST_PROMPT_SUPPORT/g" Marlin/Configuration_adv.h
        sed -i "s/[^ ]*#define HOST_STATUS_NOTIFICATIONS/#define HOST_STATUS_NOTIFICATIONS/g" Marlin/Configuration_adv.h
        
        # Enable mechanical gantry calibration
        sed -i "s/[^ ]*#define MECHANICAL_GANTRY_CALIBRATION/#define MECHANICAL_GANTRY_CALIBRATION/g" Marlin/Configuration_adv.h
        
        # Configure additional options for mechanical gantry calibration
        sed -i "s/#define GANTRY_CALIBRATION_CURRENT.*/#define GANTRY_CALIBRATION_CURRENT Z_CURRENT \/ 3/g" Marlin/Configuration_adv.h
        ## TODO: Adjust this after installing the mechanical endstops and testing G34, as we shouldn't have to move TOO much past the max height?!
        #sed -i "s/#define GANTRY_CALIBRATION_EXTRA_HEIGHT.*/#define GANTRY_CALIBRATION_EXTRA_HEIGHT 15/g" Marlin/Configuration_adv.h
        sed -i "s/#define GANTRY_CALIBRATION_EXTRA_HEIGHT.*/#define GANTRY_CALIBRATION_EXTRA_HEIGHT 10/g" Marlin/Configuration_adv.h
        ## TODO: Should we lower the feed rate? Or is this already lowered?
        sed -i "s/#define GANTRY_CALIBRATION_FEEDRATE.*/#define GANTRY_CALIBRATION_FEEDRATE 500/g" Marlin/Configuration_adv.h
        sed -i "s/#define GANTRY_CALIBRATION_COMMANDS_POST.*/#define GANTRY_CALIBRATION_COMMANDS_POST \"G28 Z\"/g" Marlin/Configuration_adv.h
        
        ## WARNING: This may break something, be prepared!
        # Enable mechanical gantry calibration on startup
        sed -i "s/[^ ]*#define STARTUP_COMMANDS .*/#define STARTUP_COMMANDS \"M117 Auto-homing..\\\nG28\\\nM117 Calibrating Z axis..\\\nG34\\\nM117 Ready.\"/g" Marlin/Configuration_adv.h
        
        # Enable backlash compensation
        sed -i "s/[^ ]*#define BACKLASH_COMPENSATION/#define BACKLASH_COMPENSATION/g" Marlin/Configuration_adv.h
        sed -i "s/[^ ]*#define BACKLASH_GCODE/#define BACKLASH_GCODE/g" Marlin/Configuration_adv.h
        
        ## TODO: What about assisted tramming? Could that help us with bed leveling?
        ## TODO: What about G29_RETRY_AND_RECOVER? Can that help us with probing/leveling?
        ## TODO: Should we use STARTUP_COMMANDS to do homing (G28?) + G34 to calibrate the X gantry automatically on boot?
        ## TODO: How do HOST_ACTION_COMMANDS work? Can we not have custom commands in Jyers UI/DWIN display?
        
        ## END OF CONFIGURATION_ADV.H
      env:
        GRID: ${{ matrix.grid }}
        HIGH_SPEED: ${{ matrix.high-speed }}
        
    - name: Compile Firmware (${{ env.TARGET_BRANCH }})
      id: compile_firmware
      run: |
        # Generate a name for the firmware and export it as a step output
        if ($HIGH_SPEED); then HS_LABEL=-HS; else HS_LABEL=; fi;
        FIRMWARE_NAME="E3V2-UBL-BLTouch-${GRID}x${GRID}${HS_LABEL}-${BOARD}-${VERSION}"
        echo "::set-output name=name::${FIRMWARE_NAME}"
        echo "::set-output name=filename::${FIRMWARE_NAME}.bin"
      
        ## TODO: Get the board env name dynamically instead?
        # Compile the firmware
        pio run -e $BOARD
        
        # Copy the firmware and configuration files to a named temporary folder
        mkdir -p "temp/${FIRMWARE_NAME}"
        ## TODO: Get the board env name dynamically instead?
        cp .pio/build/$BOARD/firmware.bin "temp/${FIRMWARE_NAME}/firmware.bin"
        cp Marlin/Configuration.h "temp/${FIRMWARE_NAME}/Configuration.h"
        cp Marlin/Configuration_adv.h "temp/${FIRMWARE_NAME}/Configuration_adv.h"
      env:
        BOARD: ${{ matrix.board }}
        GRID: ${{ matrix.grid }}
        HIGH_SPEED: ${{ matrix.high-speed }}
        VERSION: ${{ env.RELEASE_VERSION }}
        
    - name: Publish Artifacts (${{ env.TARGET_BRANCH }})
      uses: actions/upload-artifact@v2
      with:
        # name: ${{ steps.compile_firmware.outputs.filename }}
        # name: ${{ steps.compile_firmware.outputs.name }}.zip
        name: ${{ steps.compile_firmware.outputs.name }}
        # path: temp/build.bin
        path: temp/
